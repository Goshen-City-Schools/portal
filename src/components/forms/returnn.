 return (
    <Flex direction={"column"} rowGap={6} columnGap={8} pb={6}>
      <Flex gap={6} direction={{ base: "column", md: "row" }}>
        <FormControl id="date">
          <FormLabel fontWeight={"bold"} fontSize={"sm"}>
            First name
          </FormLabel>
          <Input
            type="text"
            name="firstName"
            fontSize={"sm"}
            value={formData.firstName}
            placeholder={"First name"}
            onChange={handleChange}
          />
        </FormControl>
        <FormControl id="date">
          <FormLabel fontWeight={"bold"} fontSize={"sm"}>
            Surname
          </FormLabel>
          <Input
            type="text"
            name="lastName"
            fontSize={"sm"}
            value={formData.lastName}
            placeholder={"Last name"}
            onChange={handleChange}
          />
        </FormControl>
      </Flex>

      {/* Date of Birth & Gneder*/}
      <Flex gap={6} direction={{ base: "column", md: "row" }}>
        <FormControl id="time">
          <FormLabel fontWeight={"bold"} fontSize={"sm"}>
            Gender
          </FormLabel>
          <Select
            py={1}
            name="gender"
            fontSize={"sm"}
            value={formData.gender}
            onChange={handleChange}
          >
            <option value="">-- Select Gender --</option>
            <option value="male">Male</option>
            <option value="female">Female</option>
          </Select>
        </FormControl>
        <FormControl id="time">
          <FormLabel fontWeight={"bold"} fontSize={"sm"}>
            Date of Birth
          </FormLabel>
          <Input
            type="date"
            fontSize={"sm"}
            name="dateOfBirth"
            value={formData.dateOfBirth}
            onChange={handleChange}
          />
        </FormControl>
      </Flex>

      <Flex gap={6} direction={{ base: "column", md: "row" }}>
        {/* Class */}
        <FormControl id="class">
          <FormLabel fontWeight={"bold"} fontSize={"sm"}>
            Class
          </FormLabel>
          <Select
            py={1}
            name="class"
            fontSize={"sm"}
            onChange={handleChange}
            value={formData.class}
          >
            <option value="">-- Select class --</option>
            {schoolData?.map((schoolClass, index) => (
              <option key={index} value={schoolClass._id}>
                {schoolClass.name}
              </option>
            ))}
          </Select>
        </FormControl>

        {/* Subclass */}
        {availableSubclasses.length > 0 && (
          <FormControl id="subclass">
            <FormLabel fontWeight={"bold"} fontSize={"sm"}>
              Subclass
            </FormLabel>
            <Select
              py={1}
              name="subclass"
              fontSize={"sm"}
              onChange={handleChange}
              value={formData.subclass}
            >
              <option value="">-- Select subclass --</option>
              {availableSubclasses?.map((subclass, index) => (
                <option key={index} value={subclass._id}>
                  {subclass.name}
                </option>
              ))}
            </Select>
          </FormControl>
        )}
      </Flex>

      {/* Class */}
      <FormControl id="date">
        <FormLabel fontWeight={"bold"} fontSize={"sm"}>
          Student Type
        </FormLabel>
        <Select
          py={1}
          name="studentType"
          fontSize={"sm"}
          onChange={handleChange}
          value={formData.studentType}
        >
          <option value="">-- Select Student Type --</option>
          <option value="new">New Student</option>
          <option value="returning">Returning Student</option>
        </Select>
      </FormControl>

      <Text
        as="small"
        textAlign={"center"}
        letterSpacing={0.5}
        color={"warning.900"}
        fontWeight={"bold"}
      >
        Student ID is generated on successful account creation.
      </Text>

      <Button
        w={"max-content"}
        id="upload"
        rightIcon={<MdArrowForward />}
        mx={"auto"}
        size={"sm"}
        colorScheme="blue"
        type="button"
        onClick={() => handleNextForm(activeFormIndex)}
        isLoading={loading}
      >
        Next
      </Button>
    </Flex>
  );